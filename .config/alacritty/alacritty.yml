# Configuration for Alacritty, the GPU enhanced terminal emulator.

######################
##     IMPORTS      ##
######################
  # Import additional configuration files
  # Imports are loaded in order, skipping all missing files, with the importing
  # file being loaded last. If a field is already present in a previous import, it
  # will be replaced.
  # All imports must either be absolute paths starting with `/`, or paths relative
  # to the user's home directory starting with `~/`.
import:
  - ~/.config/alacritty/window.yml
  - ~/.config/alacritty/font.yml
  - ~/.config/alacritty/shemes.yml
  - ~/.config/alacritty/keymaps.yml

######################
##       ENV        ##
######################
  # TERM variable
  # Any items in the `env` entry below will be added as
  # environment variables. Some entries may override variables
  # set by alacritty itself.
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
env:
  TERM: xterm-256color

######################
##    SCROLLING     ##
######################
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
scrolling:
  history: 10000

  # Scrolling distance multiplier.
  multiplier: 3

######################
##        BELL      ##
######################
bell:
  # Visual Bell Animation
  # Animation effect for flashing the screen when the visual bell is rung.
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo

  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
  # disable the visual bell animation.
  duration: 0

  # Visual bell animation color.
  color: '#ffffff'

  # Bell Command
  # This program is executed whenever the bell is rung.
  # When set to `command: None`, no command will be executed.
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

######################
##     SELECTION    ##
######################
selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

######################
##      CURSOR      ##
######################
cursor:
  # Cursor style
  style:
    # Cursor shape
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block

    # Cursor blinking state
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Off

  # Vi mode cursor style
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  # See `cursor.style` for available options.
  vi_mode_style: None

  # Cursor blinking interval in milliseconds.
  blink_interval: 750

  # Time after which cursor stops blinking, in seconds.
  # Specifying '0' will disable timeout for blinking.
  blink_timeout: 5

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  thickness: 0.15

  # Live config reload (changes require restart)
live_config_reload: true

######################
##       SHELL      ##
######################
  # You can set `shell.program` to the path of your favorite shell, e.g.
  # `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the
  # shell.
  #shell:
# Default:
#   - (Linux/BSD/macOS) `$SHELL` or the user's login shell, if `$SHELL` is unset
#   - (Windows) powershell
#  program: /bin/bash
#  args:
#    - --login

######################
##      WORKING     ##
######################
  # Startup directory
  # Directory the shell is started in. If this is unset, or `None`, the working
  # directory of the parent process will be used.
  # Send ESC (\x1b) before characters when alt is pressed.
#working_directory: None
#alt_send_esc: true
# Offer IPC using `alacritty msg` (unix only)
#ipc_socket: true

mouse:
  # Click settings
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

######################
##      HINTS       ##
######################
  # Terminal hints can be used to find text or hyperlink in the visible part of
  # the terminal and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  # Each hint must have any of `regex` or `hyperlinks` field and either an
  # `action` or a `command` field. The fields `mouse`, `binding` and
  # `post_processing` are optional.
  # The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
  # highlighted.
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs and applies only to
  # `regex` matches.

  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  
  enabled:
   - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
             [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     hyperlinks: true
     command: xdg-open
     post_processing: true
     mouse:
       enabled: true
       mods: None
     binding:
       key: U
       mods: Control|Shift

###############################
##      MOUSE BINDINGS       ##
###############################
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
# Each mouse binding will specify a:
# - `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
# - `action` (see key bindings for actions not exclusive to mouse mode)
# - Mouse exclusive actions:
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
# And optionally:
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Right,                 action: ExpandSelection }
  - { mouse: Right,  mods: Control, action: ExpandSelection }
  - { mouse: Middle, mode: ~Vi,     action: PasteSelection  }


##################
##     DEBUG    ##
##################
debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Renderer override.
  #   - glsl3
  #   - gles2
  #   - gles2_pure
  renderer: None

  # Print all received window events.
  print_events: false

  # Highlight window damage information.
  highlight_damage: false